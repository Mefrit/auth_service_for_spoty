{"version":3,"sources":["App.tsx"],"names":[],"mappings":";;;;;;;;IAqCA,IAAI,SAAS,GAA4B,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;IAE7D,SAAS,sBAAsB,CAAC,QAA6C;QACzE,OAAO,uCAAK,SAAS,EAAC,WAAW;YAC7B,uCAAK,GAAG,EAAE,QAAQ,CAAC,KAAK,EAAE,GAAG,EAAC,eAAe,GAAG;YAChD,4CAAO,QAAQ,CAAC,QAAQ,CAAQ,CAC9B,CAAC;IACX,CAAC;IAuFD,IAAM,MAAM,GAAG;QAEX,QAAQ,EAAE,mBAAQ;KACrB,CAAA;IACD,IAAM,IAAI,GAAG,mBAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;IAClE,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;IAChC,IAAI,CAAC,MAAM,CAAC,8BAAC,gCAAa;QACtB,8BAAC,yBAAM;YACH,8BAAC,wBAAK,IAAC,IAAI,EAAC,GAAG,EAAC,OAAO,EACnB,8BAAC,mBAAQ,IAAC,IAAI,EACV,MAAM,GACN,GACN;YACF,8BAAC,wBAAK,IAAC,IAAI,EAAC,OAAO,EAAC,OAAO,EAAE,8BAAC,iBAAI,IAAC,IAAI,EACnC,MAAM,GACN,GAAI,CACH,CACG,CACf,CAAC","file":"../App.js","sourcesContent":["import { postJSON, getParams, getCurentUserInfo, getDataFromApi } from \"./lib/query\";\r\nimport { PlayList } from \"./modules/PlayList\";\r\nimport { AudioPlayer } from \"./modules/AudioPlayer\";\r\nimport { Api } from \"./modules/Api\";\r\nimport { settings } from \"./settings\";\r\nimport { Play } from \"./modules/PlayModule\"\r\nimport React from \"react\";\r\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport {\r\n    userInfoDom,\r\n    playsBtn,\r\n    albumsContent,\r\n    audioPlayer,\r\n    songInfoPlayer,\r\n    playPause,\r\n    playBack,\r\n    playForward,\r\n    playProgress,\r\n    playSoundMute,\r\n    playVolume,\r\n    playTimeStart,\r\n    playSvgPath,\r\n    playTimeEnd,\r\n    registrationLink,\r\n} from \"./lib/domInit\";\r\n\r\nimport {\r\n    SettingsInterface,\r\n    GetUserInfoInterface,\r\n    PlayerInterfaceInput,\r\n    DefaultRequest,\r\n} from \"./interfaces/DefaultInterface\";\r\nimport { MainPageInterface } from \"./interfaces/MainPageInterface\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { MainPage } from \"./modules/MainPage\"\r\nlet tokenInfo: { accessToken: string } = { accessToken: \"\" };\r\n\r\nfunction getTemplateForUserInfo(userInfo: { image: string; dispname: string }) {\r\n    return <div className=\"user-info\">\r\n        <img src={userInfo.image} alt=\"image_profile\" />\r\n        <span>{userInfo.dispname}</span>\r\n    </div>;\r\n}\r\n// / const urlParams = getParams(window.location);\r\n\r\n// if (urlParams.code && !tokenInfo.accessToken && !localStorage.getItem(\"accessToken\")) {\r\n//     postJSON(\"/\", {\r\n//         code: urlParams.code,\r\n//     }).then(async (answer) => {\r\n//         // if (answer.result && answer.accessToken) {\r\n//         //     const parsedToken = JSON.parse(answer.accessToken);\r\n//         //     if (parsedToken.error) {\r\n//         //         alert(\"ERROR =>\" + parsedToken.error_description);\r\n//         //     } else {\r\n//         //         registrationLink.style.display = \"none\";\r\n//         //         localStorage.setItem(\"accessToken\", parsedToken.access_token);\r\n\r\n//         //         localStorage.setItem(\"timeSetAccessToken\", new Date().getTime().toString());\r\n//         //         tokenInfo = parsedToken.access_token;\r\n//         //         const userInfo: GetUserInfoInterface = await getCurentUserInfo(parsedToken.access_token);\r\n\r\n//         //         if (userInfoDom && userInfo.result && userInfo.user) {\r\n//         //             localStorage.setItem(\"id_user\", userInfo.user?.id);\r\n//         //             const userInfoContent = getTemplateForUserInfo(userInfo.user);\r\n//         //             userInfoDom.insertAdjacentHTML(\"beforeend\", userInfoContent);\r\n//         //         } else {\r\n//         //             alert(userInfo.message);\r\n//         //         }\r\n//         //     }\r\n//         // }\r\n//     });\r\n// } else {\r\n//     if (localStorage.getItem(\"accessToken\") !== \"undefined\") {\r\n//         // const timeSetAccessToken = Number(localStorage.getItem(\"timeSetAccessToken\"));\r\n//         // const dateSetToken: Date = new Date(timeSetAccessToken);\r\n//         // const curentDate: Date = new Date();\r\n//         // if (curentDate.getTime() - dateSetToken.getTime() > settings.TIME_TO_BLOCK) {\r\n//         //     localStorage.removeItem(\"timeSetAccessToken\");\r\n//         //     localStorage.removeItem(\"accessToken\");\r\n//         // } else {\r\n//         //     const tokenFromStorage = localStorage.getItem(\"accessToken\");\r\n//         //     if (tokenFromStorage) {\r\n//         //         tokenInfo = { accessToken: tokenFromStorage };\r\n//         //         getCurentUserInfo(tokenInfo.accessToken).then((userInfo: GetUserInfoInterface) => {\r\n//         //             if (userInfo.result) {\r\n//         //                 localStorage.setItem(\"id_user\", userInfo.user.id);\r\n//         //                 registrationLink.style.display = \"none\";\r\n//         //                 if (userInfoDom) {\r\n//         //                     const userInfoContent = getTemplateForUserInfo(userInfo.user);\r\n//         //                     userInfoDom.insertAdjacentHTML(\"beforeend\", userInfoContent);\r\n//         //                 } else {\r\n//         //                     alert(\"Error: \" + userInfo.message);\r\n//         //                 }\r\n//         //             } else {\r\n//         //                 alert(userInfo.message);\r\n//         //             }\r\n//         //         });\r\n//         //     }\r\n//         // }\r\n//     }\r\n// }\r\n\r\n// const ApiObject = new Api();\r\n// const player = new AudioPlayer({\r\n//     audioPlayer: audioPlayer,\r\n//     api: ApiObject,\r\n//     settings: settings,\r\n//     songInfoPlayer: songInfoPlayer,\r\n//     playPause: playPause,\r\n//     playBack: playBack,\r\n//     playForward: playForward,\r\n//     playProgress: playProgress,\r\n//     playVolume: playVolume,\r\n//     playSoundMute: playSoundMute,\r\n//     timeStart: playTimeStart,\r\n//     timeEnd: playTimeEnd,\r\n//     playSvgPath: playSvgPath,\r\n// });\r\n// const main = new MainPage({\r\n//     userInfoDom: userInfoDom,\r\n//     albumsContent: albumsContent,\r\n//     player: player,\r\n//     settings: settings,\r\n//     songInfoPlayer: songInfoPlayer,\r\n//     registrationLink: registrationLink,\r\n//     playsBtn: playsBtn,\r\n// });\r\n// main.start();\r\n\r\nconst config = {\r\n\r\n    settings: settings\r\n}\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nconsole.log(\"MAIN111111111111\");\r\nroot.render(<BrowserRouter>\r\n    <Routes>\r\n        <Route path=\"/\" element={\r\n            <MainPage init={\r\n                config\r\n            } />}\r\n        />\r\n        <Route path=\"/play\" element={<Play init={\r\n            config\r\n        } />} />\r\n    </Routes>\r\n</BrowserRouter>\r\n);\r\n"]}