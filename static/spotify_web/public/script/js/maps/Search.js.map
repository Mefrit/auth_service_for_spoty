{"version":3,"sources":["Search.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;IASA,SAAgB,MAAM,CAAC,KAAU;QACvB,IAAA,KAAkC,IAAA,gBAAQ,EAAC,aAAa,CAAC,EAAxD,YAAY,QAAA,EAAE,eAAe,QAA2B,CAAC;QAC1D,IAAA,KAA6B,IAAA,gBAAQ,EAAC,EAAE,CAAC,EAAxC,SAAS,QAAA,EAAE,aAAa,QAAgB,CAAC;QAC1C,IAAA,KAAkB,IAAA,gBAAQ,EAAC,KAAK,CAAC,EAAhC,IAAI,QAAA,EAAE,OAAO,QAAmB,CAAC;QAClC,IAAA,KAA0B,IAAA,gBAAQ,EAAC,EAAE,CAAC,EAArC,QAAQ,QAAA,EAAE,WAAW,QAAgB,CAAC;QACvC,IAAA,KAAsB,IAAA,gBAAQ,EAAC,EAAE,CAAC,EAAjC,MAAM,QAAA,EAAE,SAAS,QAAgB,CAAC;QACnC,IAAA,KAA8B,IAAA,gBAAQ,EAAC,GAAG,CAAC,EAA1C,UAAU,QAAA,EAAE,aAAa,QAAiB,CAAC;QAC5C,IAAA,KAA0B,IAAA,gBAAQ,EAAC,GAAG,CAAC,EAAtC,QAAQ,QAAA,EAAE,WAAW,QAAiB,CAAC;QACxC,IAAA,KAAwB,IAAA,gBAAQ,EAAC,CAAC,CAAC,CAAC,EAAnC,OAAO,QAAA,EAAE,UAAU,QAAgB,CAAA;QAC1C,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;QAClB,IAAA,iBAAS,EAAC,cAAQ,CAAC,EAAE,CAAC,SAAS,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC,CAAA;QACrD,IAAM,WAAW,GAAG;YAChB,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;gBACzB,IAAM,UAAU,GACZ,yDAAkD,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,wCAAqC;oBACpH,YAAY,CAAC,IAAI,EAAE,CAAC;gBACxB,OAAO,CAAC,IAAI,CAAC,CAAA;gBACb,IAAA,sBAAc,EAAC,UAAU,CAAC,CAAC,IAAI,CAAC,UAAC,MAAW;oBACxC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;oBAC5B,OAAO,CAAC,KAAK,CAAC,CAAA;oBACd,IAAI,MAAM,CAAC,MAAM,EAAE;wBACf,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;qBAC7B;gBACL,CAAC,CAAC,CAAC;aACN;QAEL,CAAC,CAAC;QACF,IAAM,OAAO,GAAG,UAAC,IAAS;YACtB,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;YAClC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACxB,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvB,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAChC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;YAC1B,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;QACvB,CAAC,CAAA;QACD,SAAS,WAAW,CAAC,IAAS;YAC1B,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;gBACnB,OAAO,0BAA0B,CAAA;aACpC;YACD,OAAO,8BAAC,mBAAQ,IAAC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,EAAE,GAAI,CAAA;QAClG,CAAC;QAED,SAAS,sBAAsB,CAAC,IAAI,EAAE,EAAE;YACpC,IAAI,SAAS,GAAG,CAAC,CAAC;YAClB,IAAI,CAAC,OAAO,CAAC,UAAC,IAAS,EAAE,KAAa,EAAE,GAAQ;gBAC5C,IAAI,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE;oBAChB,SAAS,GAAG,KAAK,CAAC;iBACrB;YACL,CAAC,CAAC,CAAA;YACF,OAAO,SAAS,CAAC;QACrB,CAAC;QACD,IAAM,UAAU,GAAG,UAAC,KAAU;YAC1B,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;YAEnC,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;YACpC,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC;YACnC,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,CAAC;YAC5C,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,CAAA;QAE1C,CAAC,CAAA;QACD,OAAO,uCAAK,SAAS,EAAC,yBAAyB;YAC3C,8BAAC,WAAI,IAAC,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAI;YAC/F,uCAAK,SAAS,EAAC,QAAQ;gBACnB,uCAAK,SAAS,EAAC,wBAAwB;oBACnC;;wBAEI,yCAAO,IAAI,EAAC,MAAM,EAAC,EAAE,EAAC,eAAe,EAAC,QAAQ,EAAE,UAAC,EAAE,IAAO,eAAe,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA,CAAC,CAAC,EAAE,YAAY,EAAC,aAAa,EAAC,SAAS,EAAC,gBAAgB,EAAC,WAAW,EAAC,iFAAgB,GAAG,CAC/K,CACN;gBAEN,yCAAO,IAAI,EAAC,QAAQ,EAAC,SAAS,EAAC,gBAAgB,EAAC,EAAE,EAAC,YAAY,EAAC,OAAO,EAAE,cAAQ,WAAW,EAAE,CAAA,CAAC,CAAC,EAAE,KAAK,EAAC,gCAAO,GAAG,CAChH;YACL,IAAI,CAAC,CAAC,CAAC,uCAAK,SAAS,EAAC,gBAAgB,0DAAkB,CAAC,CAAC,CAAC,uCAAK,EAAE,EAAC,gBAAgB,EAAC,SAAS,EAAC,gBAAgB,IAAE,WAAW,CAAC,SAAS,CAAC,CAAO;YAG9I,8BAAC,yBAAW,IAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,UAAU,GAAI,CAClK,CAAA;IACV,CAAC;IA7ED,wBA6EC;IACD,IAAM,MAAM,GAAG;QAEX,QAAQ,EAAE,mBAAQ;KACrB,CAAA;IACD,IAAM,IAAI,GAAG,mBAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC;IAExE,IAAI,CAAC,MAAM,CACP,8BAAC,gCAAa;QACV,8BAAC,yBAAM;YACH,8BAAC,wBAAK,IAAC,IAAI,EAAC,SAAS,EAAC,OAAO,EAAE,8BAAC,MAAM,IAAC,IAAI,EAAE,MAAM,GAAI,GAAI,CACtD,CACG,CACnB,CAAC","file":"../Search.js","sourcesContent":["import { PlayList } from \"./modules/PlayList\"\r\nimport { AudioPlayer } from \"./modules/AudioPlayer\"\r\nimport { getDataFromApi } from \"./lib/query\";\r\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { settings } from \"./settings\";\r\nimport { Auth } from \"./modules/auth\"\r\nimport React, { useEffect, useState, useRef } from \"react\"\r\nimport { render } from \"@testing-library/react\";\r\nexport function Search(props: any) {\r\n    const [searchparams, setSearchParams] = useState(\"Linkin Park\");\r\n    const [tracklist, setTrackLists] = useState([]);\r\n    const [load, setLoad] = useState(false);\r\n    const [nameSong, setNameSong] = useState(\"\");\r\n    const [author, setAuthor] = useState(\"\");\r\n    const [albumImage, setAlbumImage] = useState(\"#\");\r\n    const [audioUrl, setAudioUrl] = useState(\"#\");\r\n    const [trackId, setTrackId] = useState(-1)\r\n    console.log(props)\r\n    useEffect(() => { }, [tracklist, load, searchparams])\r\n    const startSearch = () => {\r\n        if (searchparams.length > 0) {\r\n            const url_search =\r\n                `https://api.jamendo.com/v3.0/tracks/?client_id=${props.init.settings.CLIENT_ID}&format=jsonpretty&limit=30&search=` +\r\n                searchparams.trim();\r\n            setLoad(true)\r\n            getDataFromApi(url_search).then((answer: any) => {\r\n                console.log('data', answer);\r\n                setLoad(false)\r\n                if (answer.result) {\r\n                    setTrackLists(answer.data)\r\n                }\r\n            });\r\n        }\r\n\r\n    };\r\n    const setSong = (data: any) => {\r\n        console.log(\"setSong===> \", data);\r\n        setAudioUrl(data.audio);\r\n        setNameSong(data.name);\r\n        setAlbumImage(data.album_image);\r\n        setAuthor(data.album_name)\r\n        setTrackId(data.id)\r\n    }\r\n    function renderTrack(list: any) {\r\n        if (list.length === 0) {\r\n            return \"Введите параметры поиска\"\r\n        }\r\n        return <PlayList setSong={setSong} list={list} title={searchparams} type={\"track\"} url={\"\"} />\r\n    }\r\n    //вынести \r\n    function getIndexByIdInPlayList(list, id) {\r\n        let findIndex = 0;\r\n        list.forEach((elem: any, index: number, arr: any) => {\r\n            if (elem.id === id) {\r\n                findIndex = index;\r\n            }\r\n        })\r\n        return findIndex;\r\n    }\r\n    const changeSong = (index: any) => {\r\n        console.log(\"index===... \", index);\r\n\r\n        setAudioUrl(tracklist[index].audio);\r\n        setNameSong(tracklist[index].name);\r\n        setAlbumImage(tracklist[index].album_image);\r\n        setAuthor(tracklist[index].album_name)\r\n\r\n    }\r\n    return <div className=\"content content-search \">\r\n        <Auth clientId={props.init.settings.CLIENT_ID} timeBlock={props.init.settings.TIME_TO_BLOCK} />\r\n        <div className=\"search\">\r\n            <div className=\"search__text-interface\">\r\n                <label >Название песни, автора или жанр\r\n\r\n                    <input type=\"text\" id=\"search-string\" onChange={(ev) => { setSearchParams(ev.target.value) }} defaultValue=\"Linkin Park\" className=\"search__string\" placeholder=\"Введите запрос\" />\r\n                </label>\r\n            </div>\r\n\r\n            <input type=\"button\" className=\"search__action\" id=\"search-btn\" onClick={() => { startSearch() }} value=\"Найти\" />\r\n        </div>\r\n        {load ? <div className=\"search_content\">Загрузка...</div> : <div id=\"albums-content\" className=\"search_content\">{renderTrack(tracklist)}</div>}\r\n\r\n\r\n        <AudioPlayer author={author} audioUrl={audioUrl} length={tracklist.length} id_track={trackId} albumImage={albumImage} nameSong={nameSong} changeSong={changeSong} />\r\n    </div>\r\n}\r\nconst config = {\r\n\r\n    settings: settings\r\n}\r\nconst root = ReactDOM.createRoot(document.getElementById(\"rootsearch\"));\r\n\r\nroot.render(\r\n    <BrowserRouter>\r\n        <Routes>\r\n            <Route path=\"/search\" element={<Search init={config} />} />\r\n        </Routes>\r\n    </BrowserRouter>\r\n);\r\n"]}