{"version":3,"sources":["lib/query.ts"],"names":[],"mappings":"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","file":"../../lib/query.js","sourcesContent":["import { DefaultRequest, DefaultJumendoRequest, GetUserInfoInterface } from \"../interfaces/DefaultInterface\";\r\n\r\nexport function postJSON(\r\n    url: string,\r\n    args: unknown\r\n): Promise<{ accessToken?: string; result?: boolean; message?: unknown }> {\r\n    return new Promise(async (resolve, reject) => {\r\n        function getData() {\r\n            return new Promise((resolve, reject) => {\r\n                fetch(url, {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json;charset=utf-8\",\r\n                    },\r\n                    body: JSON.stringify(args),\r\n                }).then(async (data) => {\r\n                    function parseJson() {\r\n                        const parsed = data.json();\r\n                        return parsed;\r\n                    }\r\n                    function jsonError(error: any) {\r\n                        return { result: false, message: error };\r\n                    }\r\n\r\n                    resolve(await errorDecorator(parseJson, jsonError));\r\n                });\r\n            });\r\n        }\r\n        function fetchError(message: any) {\r\n            alert(\"Error:\" + message);\r\n            return false;\r\n        }\r\n\r\n        resolve(errorDecorator(getData, fetchError));\r\n    });\r\n}\r\nasync function errorDecorator(f: any, e: any) {\r\n    try {\r\n        return await f();\r\n    } catch (error: unknown) {\r\n        return e(error);\r\n    }\r\n}\r\n\r\nexport async function getJSON(url: string): Promise<DefaultJumendoRequest> {\r\n    return new Promise((resolve, reject) => {\r\n        function getData() {\r\n            return new Promise((resolve, reject) => {\r\n                fetch(url).then(async (data) => {\r\n                    function parseJson() {\r\n                        const parsed = data.json();\r\n                        return parsed;\r\n                    }\r\n\r\n                    resolve(await errorDecorator(parseJson));\r\n                });\r\n            });\r\n        }\r\n        resolve(errorDecorator(getData));\r\n    });\r\n}\r\nexport function getParams(url = window.location) {\r\n    let params: {\r\n        [key: string]: string;\r\n    } = {};\r\n    const urlStr = url.toString();\r\n    new URL(urlStr).searchParams.forEach(function (val: string, key: string) {\r\n        params[key] = val; // Пушим пары ключ / значение (key / value) в объект\r\n    });\r\n    return params;\r\n}\r\nexport async function getCurentUserInfo(accessToken: string): Promise<GetUserInfoInterface> {\r\n    return new Promise((resolve, reject) => {\r\n        const url =\r\n            \"https://api.jamendo.com/v3.0/users/?client_id=cf25482b&format=jsonpretty&access_token=\" + accessToken;\r\n        getJSON(url).then((data: DefaultJumendoRequest) => {\r\n            if (data.headers.status === \"success\" && data.results) {\r\n                const result: { image: string; dispname: string; id: string } = data.results[0];\r\n                resolve({ result: true, user: result });\r\n            } else {\r\n                resolve({\r\n                    result: false,\r\n                    message: data.headers.error_message,\r\n                    user: { image: \"\", dispname: \"\", id: \"\" },\r\n                });\r\n            }\r\n        });\r\n    });\r\n}\r\nexport async function getDataFromApi(url: string): Promise<DefaultRequest> {\r\n    return new Promise((resolve, reject) => {\r\n        getJSON(url).then((data: DefaultJumendoRequest) => {\r\n            if (data.headers.status === \"success\") {\r\n                resolve({ result: true, data: data.results });\r\n            } else {\r\n                resolve({ result: false, message: data.headers.error_message, data: {} });\r\n            }\r\n        });\r\n    });\r\n}\r\n"]}