{"version":3,"sources":["lib/query.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,SAAgB,QAAQ,CAAC,GAAW,EAAE,IAAS;QAC3C,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,KAAK,CAAC,GAAG,EAAE;gBACP,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE;oBACL,cAAc,EAAE,gCAAgC;iBACnD;gBACD,IAAI,EAAE,IAAI,CAAC,SAAS,cAAM,IAAI,EAAG;aACpC,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI;gBACT,IAAI;oBACA,IAAM,MAAM,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;oBAC3B,OAAO,CAAC,MAAM,CAAC,CAAC;iBACnB;gBAAC,OAAO,GAAQ,EAAE;oBACf,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;iBACvD;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAjBD,4BAiBC;IAED,SAAsB,OAAO,CAAC,GAAW;;;gBACrC,WAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;wBAC/B,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAC,IAAS;4BAC7B,IAAI;gCACA,IAAM,MAAM,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;gCAC3B,OAAO,CAAC,MAAM,CAAC,CAAC;6BACnB;4BAAC,OAAO,GAAQ,EAAE;gCACf,OAAO,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;6BACvD;wBACL,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,EAAC;;;KACN;IAXD,0BAWC;IACD,SAAgB,SAAS,CAAC,GAAqB;QAArB,oBAAA,EAAA,MAAM,MAAM,CAAC,QAAQ;QAC3C,IAAI,MAAM,GAAQ,EAAE,CAAC;QACrB,IAAM,OAAO,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC/B,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE,GAAG;YACpD,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;QACtB,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IAClB,CAAC;IAPD,8BAOC","file":"../../lib/query.js","sourcesContent":["export function postJSON(url: string, args: any) {\r\n    return new Promise((resolve, reject) => {\r\n        fetch(url, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json;charset=utf-8\",\r\n            },\r\n            body: JSON.stringify({ ...args }),\r\n        }).then((data) => {\r\n            try {\r\n                const parsed = data.json();\r\n                resolve(parsed);\r\n            } catch (err: any) {\r\n                resolve({ result: false, message: err.toString() });\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nexport async function getJSON(url: string) {\r\n    return new Promise((resolve, reject) => {\r\n        return fetch(url).then((data: any) => {\r\n            try {\r\n                const parsed = data.json();\r\n                resolve(parsed);\r\n            } catch (err: any) {\r\n                resolve({ result: false, message: err.toString() });\r\n            }\r\n        });\r\n    });\r\n}\r\nexport function getParams(url = window.location) {\r\n    let params: any = {};\r\n    const url_str = url.toString();\r\n    new URL(url_str).searchParams.forEach(function (val, key) {\r\n        params[key] = val; // Пушим пары ключ / значение (key / value) в объект\r\n    });\r\n    return params;\r\n}\r\n"]}