{"version":3,"sources":["lib/query.ts"],"names":[],"mappings":"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","file":"../../lib/query.js","sourcesContent":["import { DefaultRequest, DefaultJumendoRequest, GetUserInfoInterface } from \"../interfaces/defaultInterface\";\r\nexport function postJSON(url: string, args: unknown): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            fetch(url, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json;charset=utf-8\",\r\n                },\r\n                body: JSON.stringify(args),\r\n            }).then((data) => {\r\n                try {\r\n                    const parsed = data.json();\r\n                    resolve(parsed);\r\n                } catch (err: unknown) {\r\n                    resolve({ result: false, message: err });\r\n                }\r\n            });\r\n        } catch (e: unknown) {\r\n            alert(\"ERROR \" + e);\r\n        }\r\n    });\r\n}\r\n\r\nexport async function getJSON(url: string): Promise<DefaultJumendoRequest> {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            return fetch(url).then((data) => {\r\n                const parsed = data.json();\r\n                resolve(parsed);\r\n            });\r\n        } catch (e: unknown) {\r\n            alert(\"ERROR \" + e);\r\n        }\r\n    });\r\n}\r\nexport function getParams(url = window.location) {\r\n    let params: {\r\n        [key: string]: string;\r\n    } = {};\r\n    const url_str = url.toString();\r\n    new URL(url_str).searchParams.forEach(function (val: string, key: string) {\r\n        params[key] = val; // Пушим пары ключ / значение (key / value) в объект\r\n    });\r\n    return params;\r\n}\r\nexport async function getCurentUserInfo(accessToken: string): Promise<GetUserInfoInterface> {\r\n    return new Promise((resolve, reject) => {\r\n        const url =\r\n            \"https://api.jamendo.com/v3.0/users/?client_id=cf25482b&format=jsonpretty&access_token=\" + accessToken;\r\n        getJSON(url).then((data: DefaultJumendoRequest) => {\r\n            if (data.headers.status === \"success\") {\r\n                resolve({ result: true, user: data.results[0] });\r\n            } else {\r\n                resolve({ result: false, message: data.headers.error_message });\r\n            }\r\n        });\r\n    });\r\n}\r\nexport async function getDataFromApi(url: string): Promise<DefaultRequest> {\r\n    return new Promise((resolve, reject) => {\r\n        getJSON(url).then((data: DefaultJumendoRequest) => {\r\n            if (data.headers.status === \"success\") {\r\n                resolve({ result: true, data: data.results });\r\n            } else {\r\n                resolve({ result: false, message: data.headers.error_message });\r\n            }\r\n        });\r\n    });\r\n}\r\n"]}