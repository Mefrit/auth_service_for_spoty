{"version":3,"sources":["Play.ts"],"names":[],"mappings":"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","file":"../Play.js","sourcesContent":["import { getParams } from \"./lib/query\";\r\nimport { PlayList } from \"./modules/PlayList\";\r\nimport { AudioPlayer } from \"./modules/AudioPlayer\";\r\n\r\nimport { Api } from \"./modules/Api\";\r\nimport { settings } from \"./settings\";\r\nimport {\r\n    userInfoDom,\r\n    songs,\r\n    audioPlayer,\r\n    songInfoPlayer,\r\n    playPause,\r\n    playBack,\r\n    playForward,\r\n    playProgress,\r\n    playSoundMute,\r\n    playVolume,\r\n    playTimeStart,\r\n    playSvgPath,\r\n    playTimeEnd,\r\n} from \"./lib/domInit\";\r\n\r\nimport { ApiInterface } from \"./interfaces/ApiInterface\";\r\nimport { PlayListItemInterface } from \"./interfaces/PlayListInterface\";\r\nimport { SettingsInterface, PlayerInterfaceInput } from \"./interfaces/DefaultInterface\";\r\nimport { PlayInterface } from \"./interfaces/PlayInterface\";\r\nclass Play {\r\n    userInfoDom: HTMLElement;\r\n    songsDom: HTMLElement;\r\n    api: ApiInterface;\r\n    player: PlayerInterfaceInput;\r\n    settings: SettingsInterface;\r\n    urlParams: {\r\n        [key: string]: string;\r\n    };\r\n    constructor(conf: PlayInterface) {\r\n        this.userInfoDom = conf.userInfoDom;\r\n        this.songsDom = conf.songs;\r\n        this.api = conf.api;\r\n        this.player = conf.player;\r\n        this.settings = conf.settings;\r\n        this.urlParams = conf.urlParams;\r\n    }\r\n    playMusic = (ev: Event) => {\r\n        if (ev.target) {\r\n            const el = ev.target as HTMLInputElement;\r\n            const songSetting = el.getAttribute(\"data-info-music\");\r\n\r\n            if (songSetting) {\r\n                const songData = JSON.parse(songSetting);\r\n\r\n                this.player.play(songData);\r\n            }\r\n        }\r\n    };\r\n    createBackLink() {\r\n        return \"<a href='/'>Назад</a>\";\r\n    }\r\n    async prepareArtistSongs() {\r\n        let url_playlist_elem, playlist;\r\n        const urlArtistSongs = `https://api.jamendo.com/v3.0/artists/tracks/?client_id=${this.settings.CLIENT_ID}&format=jsonpretty&order=track_name_desc&id=${this.urlParams.artist_id}`;\r\n        const artistsSongs = await this.api.getDataFromApi(urlArtistSongs);\r\n        if (artistsSongs.result && artistsSongs.data.length > 0) {\r\n            artistsSongs.data.forEach(\r\n                (element: { tracks: PlayListItemInterface[]; name: string; id: string | number }) => {\r\n                    url_playlist_elem = `https://api.jamendo.com/v3.0/artists/tracks/?client_id=${this.settings.CLIENT_ID}&format=jsonpretty&limit=40&id=${element.id}&order=track_id`;\r\n                    playlist = new PlayList({\r\n                        list: element.tracks,\r\n                        title: element.name,\r\n                        type: \"track\",\r\n                        url: url_playlist_elem,\r\n                    });\r\n                    this.songsDom.insertAdjacentHTML(\"beforeend\", playlist.render());\r\n                }\r\n            );\r\n        } else {\r\n            this.songsDom.insertAdjacentHTML(\"beforeend\", `<h4>Список доступной музыки пуст</h4>`);\r\n        }\r\n    }\r\n    async prepareLoverSongs() {\r\n        let url_playlist_elem, playlist;\r\n        const accessToken = localStorage.getItem(\"accessToken\");\r\n        const id_user = localStorage.getItem(\"id_user\");\r\n        const url_playlist = `https://api.jamendo.com/v3.0/playlists/tracks/?client_id=${this.settings.CLIENT_ID}&format=jsonpretty&user_id=${id_user}\r\n                &access_token=${accessToken}`;\r\n        const favorite = await this.api.getDataFromApi(url_playlist);\r\n        if (favorite.result) {\r\n            if (favorite.data.length === 0) {\r\n                this.songsDom.insertAdjacentHTML(\"beforeend\", `<h4 style=\"padding:10px\">Список пуст</h4>`);\r\n            }\r\n            favorite.data.forEach((element: { tracks: PlayListItemInterface[]; name: string; id: string | number }) => {\r\n                url_playlist_elem = `https://api.jamendo.com/v3.0/playlists/tracks/?client_id=${this.settings.CLIENT_ID}&format=jsonpretty&limit=40&id=${element.id}`;\r\n                playlist = new PlayList({\r\n                    list: element.tracks,\r\n                    title: element.name,\r\n                    type: \"track\",\r\n                    url: url_playlist_elem,\r\n                });\r\n                this.songsDom.insertAdjacentHTML(\"beforeend\", playlist.render());\r\n            });\r\n        } else {\r\n            this.songsDom.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<h4>Авторизуйтесь, для получения списка ваших плейлистов.</h4>`\r\n            );\r\n        }\r\n    }\r\n    async prepareSongs() {\r\n        if (this.urlParams.playListId) {\r\n            const songs = await this.api.loadPlayList(this.urlParams.playListId, this.settings.CLIENT_ID);\r\n            const url_playlist = `https://api.jamendo.com/v3.0/playlists/tracks/?client_id=${this.settings.CLIENT_ID}&format=jsonpretty&limit=40&id=${this.urlParams.playListId}`;\r\n            if (songs.result && songs.data.length > 0) {\r\n                let playlist = new PlayList({\r\n                    list: songs.data[0].tracks,\r\n                    title: songs.data[0].name,\r\n                    type: \"track\",\r\n                    url: url_playlist,\r\n                });\r\n                this.songsDom.insertAdjacentHTML(\"beforeend\", playlist.render());\r\n            } else {\r\n                this.songsDom.insertAdjacentHTML(\"beforeend\", `<h4>Список доступной музыки пуст</h4>`);\r\n            }\r\n        }\r\n    }\r\n    setRegistrationLink() {\r\n        const link = document.getElementById(\"registrationLink\");\r\n        link?.setAttribute(\r\n            \"href\",\r\n            `https://api.jamendo.com/v3.0/oauth/authorize?client_id=${this.settings.CLIENT_ID}&redirect_uri=http://localhost:4567/&response_type=code`\r\n        );\r\n    }\r\n    initPlaySongEvents() {\r\n        const playsBtn: HTMLCollection = document.getElementsByClassName(\"play-btn\");\r\n        if (playsBtn) {\r\n            for (var i = 0; i < playsBtn.length; i++) {\r\n                playsBtn[i].addEventListener(\"click\", this.playMusic);\r\n            }\r\n        }\r\n    }\r\n    async init() {\r\n        // вход\r\n        this.setRegistrationLink();\r\n        if (this.songsDom) {\r\n            switch (this.urlParams.mode) {\r\n                case \"lovesongs\":\r\n                    await this.prepareLoverSongs();\r\n                    break;\r\n                case \"artist\":\r\n                    await this.prepareArtistSongs();\r\n                    break;\r\n                default:\r\n                    await this.prepareSongs();\r\n            }\r\n        }\r\n        this.initPlaySongEvents();\r\n    }\r\n    start() {\r\n        this.init();\r\n    }\r\n}\r\n\r\nconst urlParams: {\r\n    [key: string]: string;\r\n} = getParams(window.location);\r\n\r\nconst ApiObject = new Api();\r\nconst player = new AudioPlayer({\r\n    audioPlayer: audioPlayer,\r\n    api: ApiObject,\r\n    settings: settings,\r\n    songInfoPlayer: songInfoPlayer,\r\n    playPause: playPause,\r\n    playBack: playBack,\r\n    playForward: playForward,\r\n    playProgress: playProgress,\r\n    playVolume: playVolume,\r\n    playSoundMute: playSoundMute,\r\n    timeStart: playTimeStart,\r\n    timeEnd: playTimeEnd,\r\n    playSvgPath: playSvgPath,\r\n});\r\nconst main = new Play({\r\n    userInfoDom: userInfoDom,\r\n    songs: songs,\r\n    api: ApiObject,\r\n    player: player,\r\n    settings: settings,\r\n    urlParams: urlParams,\r\n});\r\nmain.start();\r\n"]}