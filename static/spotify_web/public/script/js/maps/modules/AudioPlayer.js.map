{"version":3,"sources":["modules/AudioPlayer.tsx"],"names":[],"mappings":"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","file":"../../modules/AudioPlayer.js","sourcesContent":["import { SongInfoPlayer } from \"./SongInfoPlayer\";\r\nimport { SettingsInterface, DefaultRequest, SongData, DefaultJumendoRequest } from \"../interfaces/DefaultInterface\";\r\nimport { ApiInterface } from \"../interfaces/ApiInterface\";\r\nimport { AudioPlayerInterface } from \"../interfaces/AudioPlayerInterface\";\r\nimport React, { useEffect, useState, useRef } from \"react\"\r\n\r\nexport function AudioPlayer(props: any) {\r\n    const [trackIndex, setTrackIndex] = useState(0);\r\n    const [trackProgress, setTrackProgress] = useState(0);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const audioRef = useRef(new Audio(props.songUrl));\r\n    const intervalRef: any = useRef();\r\n    const isReady = useRef(false);\r\n    const [volume, setVolume] = useState(0.5)\r\n    useEffect(() => {\r\n\r\n    })\r\n    const toPrevTrack = () => {\r\n\r\n        let index_tmp = trackIndex - 1;\r\n        if (index_tmp < 0) {\r\n            index_tmp = props.length - 1;\r\n        }\r\n        props.changeSong(index_tmp)\r\n        setTrackIndex(index_tmp)\r\n    }\r\n    function getTimeFromSecunds(sec: number) {\r\n        if (!sec) {\r\n            return \"00:00\"\r\n        }\r\n        const full_minutes = Math.round(sec / 60);\r\n        const secunds = Math.abs(Math.round(sec - full_minutes * 60));\r\n        return (\"0\" + full_minutes).slice(-2) + \":\" + (\"0\" + secunds).slice(-2);\r\n    }\r\n    const toNextTrack = () => {\r\n        let index_tmp = trackIndex + 1;\r\n        if (index_tmp >= props.length) {\r\n            index_tmp = 0;\r\n        }\r\n        setTrackIndex(index_tmp)\r\n        props.changeSong(index_tmp)\r\n    }\r\n    useEffect(() => {\r\n        return () => {\r\n            audioRef.current.pause();\r\n            clearInterval(intervalRef.current);\r\n        }\r\n    }, []);\r\n    useEffect(() => {\r\n        if (isPlaying) {\r\n            audioRef.current.play();\r\n            startTimer(audioRef);\r\n        } else {\r\n            clearInterval(intervalRef.current);\r\n            audioRef.current.pause();\r\n        }\r\n    }, [isPlaying]);\r\n    const onScrub = (value: number) => {\r\n        clearInterval(intervalRef.current);\r\n        audioRef.current.currentTime = value;\r\n        setTrackProgress(audioRef.current.currentTime);\r\n        startTimer(audioRef);\r\n    }\r\n    useEffect(() => {\r\n        audioRef.current.volume = volume;\r\n\r\n    }, [volume]);\r\n    useEffect(() => {\r\n        audioRef.current.pause();\r\n        audioRef.current = new Audio(props.audioUrl);\r\n        setTrackProgress(audioRef.current.currentTime);\r\n        if (isReady.current) {\r\n            audioRef.current.play();\r\n            setIsPlaying(true);\r\n            startTimer(audioRef);\r\n        } else {\r\n            isReady.current = true;\r\n        }\r\n    }, [trackIndex, props.audioUrl]);\r\n    const startTimer = (audioRef) => {\r\n        clearInterval(intervalRef.current);\r\n        intervalRef.current = setInterval(() => {\r\n            if (audioRef.current.ended) {\r\n                toNextTrack();\r\n            } else {\r\n                console.log(\"HEREE\", trackProgress,)\r\n                setTrackProgress(audioRef.current.currentTime);\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    return <div className=\"audio-player\">\r\n        <div id=\"song-info-player\">\r\n            <div className=\"song\">\r\n                {props.albumImage != \"#\" ? <img src={props.albumImage} alt=\"Logo\" className=\"song__icon\" title=\"Logo\" /> : \"\"}\r\n                <div className=\"song__info\">\r\n\r\n                    <div className='song__description' >\r\n                        <span className=\"song__title\">{props.nameSong}</span>\r\n                        <p className=\"song__author\">{props.author}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"audio-player__interface\">\r\n            <div className=\"action\">\r\n\r\n                <button className=\"action__back\" id=\"play-back\" onClick={toPrevTrack}>\r\n                    <svg role=\"img\" height=\"16\" width=\"16\" viewBox=\"0 0 16 16\">\r\n                        <path\r\n                            d=\"M3.3 1a.7.7 0 01.7.7v5.15l9.95-5.744a.7.7 0 011.05.606v12.575a.7.7 0 01-1.05.607L4 9.149V14.3a.7.7 0 01-.7.7H1.7a.7.7 0 01-.7-.7V1.7a.7.7 0 01.7-.7h1.6z\"\r\n                        ></path>\r\n                    </svg>\r\n                </button>\r\n                <button className=\"play-btn\" id=\"play-pause\" onClick={() => { setIsPlaying(!isPlaying) }}>\r\n                    <svg\r\n                        role=\"img\"\r\n                        className=\"play-btn__image\"\r\n                        height=\"16\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width=\"16\"\r\n                        viewBox=\"0 0 16 16\"\r\n                    >\r\n\r\n                        <path\r\n                            id=\"playSvgPath\"\r\n                            d={isPlaying ? \"M0,0 0,16 5,16 5,0z M 15,0 15,16 10,16 10,0z\" : \"M3 1.713a.7.7 0 011.05-.607l10.89 6.288a.7.7 0 010 1.212L4.05 14.894A.7.7 0 013 14.288V1.713z\"}\r\n                        ></path>\r\n\r\n                    </svg>\r\n                </button>\r\n                <button className=\"action__forward\" id=\"play-forward\" onClick={toNextTrack}>\r\n                    <svg\r\n                        role=\"img\"\r\n                        height=\"16\"\r\n                        className=\"play-btn__image\"\r\n                        width=\"16\"\r\n                        viewBox=\"0 0 16 16\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                        <path\r\n                            d=\"M12.7 1a.7.7 0 00-.7.7v5.15L2.05 1.107A.7.7 0 001 1.712v12.575a.7.7 0 001.05.607L12 9.149V14.3a.7.7 0 00.7.7h1.6a.7.7 0 00.7-.7V1.7a.7.7 0 00-.7-.7h-1.6z\"\r\n                        ></path>\r\n                    </svg>\r\n                </button>\r\n\r\n            </div>\r\n            <div className=\"action__progress\">\r\n                <span className=\"action__time\" id=\"play-time-start\">{getTimeFromSecunds(audioRef.current.currentTime)}</span>\r\n                <input\r\n                    className=\"action__progress_range\"\r\n                    id=\"play-progress\"\r\n                    type=\"range\"\r\n                    min=\"0\"\r\n                    max=\"100\"\r\n                    step=\"1\"\r\n                    onChange={(e: any) => onScrub(e.target.value)}\r\n                    value={trackProgress}\r\n                />\r\n                <span className=\"action__time\" id=\"play-time-end\">{getTimeFromSecunds(audioRef.current.duration)}</span>\r\n            </div>\r\n        </div>\r\n        <div className=\"options\">\r\n            <button className=\"options__volume-icon\" id=\"play-sound-mute\">\r\n                <svg\r\n                    role=\"presentation\"\r\n                    height=\"16\"\r\n                    width=\"16\"\r\n                    className=\"options__image\"\r\n                    id=\"volume-icon\"\r\n                    viewBox=\"0 0 16 16\"\r\n                >\r\n                    <path\r\n                        d=\"M9.741.85a.75.75 0 01.375.65v13a.75.75 0 01-1.125.65l-6.925-4a3.642 3.642 0 01-1.33-4.967 3.639 3.639 0 011.33-1.332l6.925-4a.75.75 0 01.75 0zm-6.924 5.3a2.139 2.139 0 000 3.7l5.8 3.35V2.8l-5.8 3.35zm8.683 4.29V5.56a2.75 2.75 0 010 4.88z\"\r\n                    ></path>\r\n                    <path d=\"M11.5 13.614a5.752 5.752 0 000-11.228v1.55a4.252 4.252 0 010 8.127v1.55z\"></path>\r\n                </svg>\r\n            </button>\r\n            <input className=\"options__volume\" id=\"play-volume\" type=\"range\" min=\"0\" max=\"1\" step=\"0.01\" onChange={(ev: any) => { setVolume(ev.target.value) }} value={volume} />\r\n        </div>\r\n\r\n    </div >\r\n}"]}